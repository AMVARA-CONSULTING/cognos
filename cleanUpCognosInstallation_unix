#!/bin/bash
# --------------------------------------------------- 
# Script to clean up a cognos installation
# removes not needed files
# --------------------------------------------------- 
# Changelog:
# 2020-09-30 RRO added nls+languages
# 2020-09-29 RRO wlp cache not correct, cognos version 11.0 not detected
# 2020-09-28 RRO enhanced
# 2020-09-25 RRO created
# --------------------------------------------------- 
VERSION=2021-08-19

# defaults
COG_ENV=crn0
WEBSERVICE_NAME="mif-ihs0"
ACTION=status
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CRNCFG="/cluster/mif/scripts/BuildUp/Cognos/mif_config.sh"
CHECK_ON_WLP_CACHE=FALSE

#
# Array of things that can be removed, files or directories
#
THINGS_WE_DO_NOT_NEED=( bkp/ cps/sharepoint/ ibm-jre/docs/ samples/ maps/ nlp/stanford-corenlp-3.7.0-models-spanish.jar nlp/stanford-corenlp-3.7.0-models-french.jar sdk/MAQuery.xsd sdk/MAResponse.xsd sdk/NET3.5 sdk/c++ sdk/dqe templates/ps/tm1/ uninstall/ webcontent/samples/ webcontent/servlet/default.htm webcontent/skins/business/ webcontent/skins/classic/ webcontent/skins/contemporary/ webcontent/skins/modern/ webcontent/skins/presentation/ webcontent/tm1/ configuration/search/collections/smarts_clue_es configuration/search/collections/smarts_clue_fr wlp/bin/tools/win/prunsrv.exe )

#
# array of languages that can be removed, e.g. all language files in bin and bin64, except en + dee
#
LANGUAGES=( cs da eu es fa fi fr hr hi hu it ja kk lv ko nb nl no pl pt ro ru sl sv th tr zh-cn zh-hk zh-mo zh-sg zh-tw )
# Fileendings to be looked at for above languages
FILEENDINGS=( bmf html jpg js json min png properties txt xml )

#
# all languages in webcontent documentation are different, therefor a new array with languages to be removed from webcontent/documentation, except en + de
#
LANGUAGES2=( ar ca fi cs el es fr hr hu ja ko no pt ru sl th zh-cn it kk nl pl ro sk sv tr zh-tw )

#
# prepare a list of environments on this server
#
CONTAINS_CRN_ENVS=$(ls /opt/IBM/cognos/ | grep -E 'crn[0-9]+$')


#
# Variable to hold the environments to patch
#
LOOP_CRN_ENVS=${COG_ENV}

#
# DRYMODE (= do not delete files) is true by default
#
DRYMODE=TRUE
LOGLEVEL=0


#
# Read Commandline Options
#
for i in "$@"
do
case $i in
    -a|--all)
	    LOOP_CRN_ENVS=${CONTAINS_CRN_ENVS}
    	    shift
    ;;
    -r0|--remove_unneeded_files)
	    DRYMODE=FALSE
	    shift
    ;; 
    -r1|--remove_uninstall_dir)
	    REMOVE_UNSTINSTALL_DIR=TRUE
	    shift
    ;; 
    -d|--debug)
	    set -x
	    shift
    ;;
    -v|--verbose)
	    LOGLEVEL=1 
	    shift
    ;;
    -vv|--more_verbose)
	    LOGLEVEL=2 
	    shift
    ;;
    -w|--check_on_wlp_cache_only)
	    CHECK_ON_WLP_CACHE=TRUE
	    shift
    ;;
    -e=*|--env=*)
	    COG_ENV="${i#*=}"
	    LOOP_CRN_ENVS=${COG_ENV}
	    shift
    ;;
    -h|--help|/?|-?)
	    echo Usage:
	    echo =======================================================
	    echo $0 "[-d|--debug, -h, -e=<ENV> --env=<ENV>, -a, -r0, -r1, -v, -vv  ]"
	    echo  -a,--all   .... cleans all crnX environments found on the specific server 
	    echo  -d,--debug .... enables debugmode set -x
	    echo  -v,--verbose .. does verbose logging 
	    echo  -vv,--more_verbose .. does more verbose logging 
	    echo  -w,--check_on_wlp_cache_only .. check only the WLP cache
	    echo  -h,--help  .... shows help
	    echo 
	    echo  -r0,--remove_unneeded_files  ... default is drymode, do not delete, only print possible saveings, setting r0 as parameter really removes the files
	    echo  -r1,--remove_uninstall_dir ... remove the uninstall directory, default do not remove
	    echo 
	    echo $0 without any options .... prints saveings on /opt/IBM/cognos/crn0
	    echo 
	    echo $0 -e=crn1 .... uses defined environment crn1 as target
	    echo ...
	    exit 0
    ;;
    *)
        # unknown option
	echo Unkown option ${i}
    ;;
esac
done

#
# Some general information
#
echo "$0 executing on $HOST"

# source general MIF config
CLUSTERCONFDIR="/cluster/mif/scripts/config"
SHELLCONF="${CLUSTERCONFDIR}/shell.cfg";
printf "[INFO] sourceing ${SHELLCONF} ... "
source ${SHELLCONF} && echo [success] || { echo [failed]; exit 1; }

MYTYPE=${HOST:4:1}


# sourcepath
SOURCEPATH=/cluster/mif/scripts/BuildUp/Cognos
TARGETPATH=/opt/IBM/cognos


# source the config
log_out "[INFO] sourceing ${CRNCFG} ... "
source ${CRNCFG}  || { log_res "[failed]"; exit 1; }

# 
# PATCH Functions
#
clean_app_server() {
	log_out "[INFO] cleaning ${COG_ENV} APP-server part"
}

clean_web_server() {
	log_out "[INFO] cleaning ${COG_ENV} WEB Server Part "

}

log_out_ext() {
	if [[ "${LOGLEVEL}" -gt "$2" ||  "${LOGLEVEL}" -eq "$2" ]]; then
		log_out "$1";
	fi
}

# remove_file_or_directory
remove_file_or_directory() {
	REMOVE_ME=$1

	# echo file to summary with all files being removed
	echo "${REMOVE_ME}" >> /tmp/cleanup_cognos_files.txt 

	# if dry mode or file to remove is not passed or empty --> just return
	[[ "${DRYMODE}" == "TRUE" ||  "$1" == "" ]] && return;


	# check for item to be removed is a file
	if [[ -f "${REMOVE_ME}" ]]; then
		rm -f "${REMOVE_ME}" && log_out_ext "[INFO] removed ${REMOVE_ME}" "2" || log_out_ext "[FAILED] to remove ${REMOVE_ME}" "2";
	fi
	# check for item to be removed is a directory 
	if [[ -d "${REMOVE_ME}" ]]; then
		rm -rf "${REMOVE_ME}" && log_out_ext "[INFO] removed ${REMOVE_ME}" "2" || log_out_ext "[FAILED] to remove ${REMOVE_ME}" "2";
	fi
}

# performs some basic checks on file or directory and add the saveing
check_this_item() {
	ITEM_TO_BE_CHECKED=$1
        if [[ -f "${ITEM_TO_BE_CHECKED}" || -d "${ITEM_TO_BE_CHECKED}" ]]
        then
                SAVED=( $(du -s ${ITEM_TO_BE_CHECKED} | cut -f1 ) );
		SAVEING+=( ${SAVED} )
		log_out_ext "[LOGLEVEL2] saveing ${SAVED} on ${ITEM_TO_BE_CHECKED}" "2"
                remove_file_or_directory "${ITEM_TO_BE_CHECKED}"
        fi	
}

#
# Print information about WLP cache
#
check_on_wlp_cache() {
	# check on WLP cache
	log_out "[INFO] Checking on WLP cache"
	WLP_DIR="wlp/usr/servers/cognosserver/workarea/org.eclipse.osgi/"
	log_out_ext "[LOGLEVEL1] WLP Directory: ${WLP_DIR}" "1"
	
	# get saveings from du
	SAVEING_WLP=( $(du -s ${WLP_DIR} 2>/dev/null | cut -f1 ) )

	# if there was nothing found, set result to 0
	[ "${SAVEING_WLP}" == "" ] && SAVEING_WLP=0;

	# format the output to human readable
	SAVEING_WLP_HUMAN=$(echo $((${SAVEING_WLP}*1024)) | numfmt --to=iec);

	# output of results
	log_out "[INFO] Websphere cache: ${SAVEING_WLP} KB = ${SAVEING_WLP_HUMAN}"
}
check_on_nls_language_files() {
	# directories with languages, we do not need
	log_out "[INFO] Checking on directories with "nls/" and languages we do not need - all except de + en";
	LANGUAGES3=( $( ls -alR /opt/IBM/cognos/crn0/webcontent/bi/ | grep -i "nls/" | sed 's/.*nls\//\//g;s/root//g;s/ps://g;s/en://g;s/\/de://g;s/[:\/]//g' | sort | uniq | xargs ) )
	for LANGUAGE in ${LANGUAGES3[@]}; do
		log_out_ext "[INFO] working on nls/${LANGUAGE}" "1" 
		for REMOVE_ME in $( find ./webcontent/ -type d -name "${LANGUAGE}" );do
			log_out_ext "[INFO] Checking on ${REMOVE_ME}" "2";
			check_this_item "${REMOVE_ME}";
		done
	done 
}

clean_any_server() {

	# check on nls/language files in webcontent directory
	check_on_nls_language_files

	# Things we do not need, e.g. Directories, bat files, samples, ... we do not need
	log_out "[INFO] Checking on things we do not need";
	for REMOVE_ME in ${THINGS_WE_DO_NOT_NEED[@]}; do
		log_out_ext "[INFO] checking on ${REMOVE_ME}" "1"
		# test if file or directory exists
		check_this_item ${REMOVE_ME};
	done

	find ./ > /tmp/crn_directory

	# find files haveing the language we do not need
	log_out "[INFO] Checking on languages we do not need";
	for LANGUAGE in ${LANGUAGES[@]}; do
		for SUFFIX in ${FILEENDINGS[@]}; do
			log_out_ext "[INFO] working on *_${LANGUAGE}.${SUFFIX}" "1"
			for REMOVE_ME in $(grep -i _${LANGUAGE}\.${SUFFIX} /tmp/crn_directory ); do
				check_this_item "${REMOVE_ME}";
			done
		done
	done

	# we don't need *.bat files
	log_out "[INFO] Checking on bat files we do not need";
	for REMOVE_ME in $(find ./ -name "*.bat" ); do check_this_item ${REMOVE_ME}; done
	
	# find *.dll e do not need
	log_out "[INFO] Checking on dll files we do not need";
	for REMOVE_ME in $(find ./ -name "*.dll" ); do 
		log_out_ext "[INFO] checking on ${REMOVE_ME}" "1"
		check_this_item "${REMOVE_ME}"; 
	done

	# find ReadMe we do not need
	log_out "[INFO] Checking on README files we do not need";
	for REMOVE_ME in $(find ./ | grep -i ReadMe ); do 
		log_out_ext "[INFO] checking on ${REMOVE_ME}" "1"
		check_this_item "${REMOVE_ME}"; 
	done

	# find documentation folder we do not need
	log_out "[INFO] Checking on language file in webcontent/documentation files we do not need";
	for REMOVE_ME in ${LANGUAGES2[@]}; do
		log_out_ext "[INFO] checking on webcontent/documentation/${REMOVE_ME}" "1"
		check_this_item "webcontent/documentation/${REMOVE_ME}"
	done

	# cleanup database files
	log_out "[INFO] Checking on database files we do not need";
	DB_NOT_NEEDED=( informix oracle sqlserver sybase zosdb2 ); 
	for DB in ${DB_NOT_NEEDED[@]}; do
		for REMOVE_ME in $(find configuration/schemas -type d 2>/dev/null | grep -i "${DB}"); do 
			log_out_ext "[INFO] checking on ${REMOVE_ME}" "1"
			check_this_item "${REMOVE_ME}"
		done
	done

	# summarize TOTAL
	SAVEING_TOTAL=0
	IFS="+"; SAVEING_TOTAL=$(bc<<<"${SAVEING[*]}")
	[[ "${SAVEING_TOTAL}" == "" ]] && SAVEING_TOTAL=0
	SAVEING_TOTAL_HUMAN=$(echo $((${SAVEING_TOTAL}*1024)) | numfmt --to=iec);

	# output saveings
	log_out "[INFO] Total saveing: ${SAVEING_TOTAL} KB = ${SAVEING_TOTAL_HUMAN}"
	log_out "[INFO] Websphere cache: ${SAVEING_WLP} KB = ${SAVEING_WLP_HUMAN}"

}
cognos_product_version() {
	COGNOS_VERSION=$(cat cmplst.txt | grep -i PRODUCT_VERSION | cut -d'=' -f2);
	if [ "${COGNOS_VERSION}" == "" ]; then  COGNOS_VERSION=$(cat cmplst.txt | egrep -i '^KIT_VERSION' | cut -d'=' -f2); fi;
}

log_out "[INFO] script version: ${VERSION}"
log_out "-----------------------------------"

#
# Loop over environments of server (default is crn0 only)
#
for i in ${LOOP_CRN_ENVS}; do
	log_out "[INFO] cleaning ${i} - ${HOST} "
	[[ "${DRYMODE}" == "TRUE" ]] && log_out "[INFO] running in DRYMODE" || log_out "[INFO] not running DRYMODE, will delete files not needed"
	log_out "[INFO] loglevel: ${LOGLEVEL} "

	# set the actual env
	COG_ENV=$i

	# change directory to env
	cd ${TARGETPATH}/${COG_ENV};

	# Cognos Version
	cognos_product_version
	if [[ ${COGNOS_VERSION} == "" ]]; then
		log_out "[INFO] there is no cognos installation in this path "$(pwd)
		continue	
	else
		log_out "[INFO] Cognos Version: ${COGNOS_VERSION}";
	fi
	

	# check wlp cache only?
	log_out "-----------------------------------"
	check_on_wlp_cache
	[[ "${CHECK_ON_WLP_CACHE}" == "TRUE" ]] && continue; 
	log_out "-----------------------------------"

	# disk usage before
	USAGE_BEFORE=$(du -s | cut -f1);
	USAGE_BEFORE=$(($USAGE_BEFORE*1024))
	USAGE_BEFORE_HUMAN=$(echo $USAGE_BEFORE | numfmt --to=iec)
	log_out "[INFO] Disk usage now: ${USAGE_BEFORE} bytes = $USAGE_BEFORE_HUMAN ";

	
	# clean on any server does not matter web or app server
	clean_any_server

	# disk usage after  
	USAGE_BEFORE=$(du -s | cut -f1);
	USAGE_BEFORE=$(($USAGE_BEFORE*1024))
	USAGE_BEFORE_HUMAN=$(echo $USAGE_BEFORE | numfmt --to=iec)
	log_out "[INFO] Disk usage after cleaning: ${USAGE_BEFORE} bytes = $USAGE_BEFORE_HUMAN ";


	continue
	
	# code below .... left there for convinience
	
	if [[ ${MYTYPE} == "i" && ${LINE::4} == "test" ]]; then
        	COG_INSTALL_TYPE=ONETIER
		clean_app_server
		clean_web_server
	fi
	if [[ ${MYTYPE} == "i" && ${LINE::4} != "test" ]]; then
        	COG_INSTALL_TYPE=WEBSERVER
		clean_web_server
	fi
	if [[ ${MYTYPE} == "a" ]]; then
        	COG_INSTALL_TYPE=APPSERVER
		clean_app_server
	fi

done


echo [done]
echo 
