#!/bin/bash
# ---------------------------------------------------
# Script to clean up a cognos installation
# removes not needed files
# ---------------------------------------------------
# Changelog:
# 2020-09-28 RRO enhanced
# 2020-09-25 RRO created
# ---------------------------------------------------


# defaults
COG_ENV=crn0
WEBSERVICE_NAME="mif-ihs0"
ACTION=status
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
CRNCFG="/cluster/mif/scripts/BuildUp/Cognos/mif_config.sh"

#
# prepare a list of environments on this server
#
CONTAINS_CRN_ENVS=$(ls /opt/IBM/cognos/ | grep -E 'crn[0-9]+$')


#
# Variable to hold the environments to patch
#
LOOP_CRN_ENVS=${COG_ENV}

#
# DRYMODE (= do not delete files) is true by default
#
DRYMODE=TRUE
LOGLEVEL=0


#
# Read Commandline Options
#
for i in "$@"
do
case $i in
    -a|--all)
            LOOP_CRN_ENVS=${CONTAINS_CRN_ENVS}
            shift
    ;;
    -r0|--remove_unneeded_files)
            DRYMODE=FALSE
            shift
    ;;
    -r1|--remove_uninstall_dir)
            REMOVE_UNSTINSTALL_DIR=TRUE
            shift
    ;;
    -d|--debug)
            set -x
            shift
    ;;
    -v|--verbose)
            LOGLEVEL=1
            shift
    ;;
    -vv|--more_verbose)
            LOGLEVEL=2
            shift
    ;;
    -e=*|--env=*)
            COG_ENV="${i#*=}"
            LOOP_CRN_ENVS=${COG_ENV}
            shift
    ;;
    -h|--help|/?|-?)
            echo Usage:
            echo =======================================================
            echo $0 "[-d|--debug, -h, -e=<ENV> --env=<ENV>, -a, -r0, -r1, -v, -vv  ]"
            echo  -a,--all   .... cleans all crnX environments found on the specific server
            echo  -d,--debug .... enables debugmode set -x
            echo  -v,--verbose .. does verbose logging
            echo  -vv,--more_verbose .. does more verbose logging
            echo  -h,--help  .... shows help
            echo
            echo  -r0,--remove_unneeded_files  ... default is drymode, do not delete, only print possible saveings, setting r0 as parameter really removes the files
            echo  -r1,--remove_uninstall_dir ... remove the uninstall directory, default do not remove
            echo
            echo $0 without any options .... prints saveings on /opt/IBM/cognos/crn0
            echo
            echo $0 -e=crn1 .... uses defined environment crn1 as target
            echo ...
            exit 0
    ;;
    *)
        # unknown option
        echo Unkown option ${i}
    ;;
esac
done

#
# Some general information
#
echo "$0 executing on $HOST"

# source general MIF config
CLUSTERCONFDIR="/cluster/mif/scripts/config"
SHELLCONF="${CLUSTERCONFDIR}/shell.cfg";
printf "[INFO] sourceing ${SHELLCONF} ... "
source ${SHELLCONF} && echo [success] || { echo [failed]; exit 1; }

MYTYPE=${HOST:4:1}


# sourcepath
SOURCEPATH=/cluster/mif/scripts/BuildUp/Cognos
TARGETPATH=/opt/IBM/cognos


# source the config
log_out "[INFO] sourceing ${CRNCFG} ... "
source ${CRNCFG}  || { log_res "[failed]"; exit 1; }

#
# PATCH Functions
#
clean_app_server() {
        log_out "[INFO] cleaning ${COG_ENV} APP-server part"
}

clean_web_server() {
        log_out "[INFO] cleaning ${COG_ENV} WEB Server Part "

}

log_out_ext() {
        if [[ "${LOGLEVEL}" -gt "$2" ||  "${LOGLEVEL}" -eq "$2" ]]; then
                log_out "$1";
        fi
}

# remove_file_or_directory
remove_file_or_directory() {
        REMOVE_ME=$1

        # echo file to summary with all files being removed
        echo "${REMOVE_ME}" >> /tmp/cleanup_cognos_files.txt

        # if dry mode or file to remove is not passed or empty --> just return
        [[ ${DRY_MODE} -eq "TRUE" ||  "$1" -eq "" ]] && return;


        # check for item to be removed is a file
        if [[ -f "${REMOVE_ME}" ]]; then
                test ${REMOVE_ME} && log_out_ext "[INFO] removed ${REMOVE_ME}" "2" || log_out_ext "[FAILED] to remove ${REMOVE_ME}" "2";
        fi
        # check for item to be removed is a directory
        if [[ -d "${REMOVE_ME}" ]]; then
                test ${REMOVE_ME} && log_out_ext "[INFO] removed ${REMOVE_ME}" "2" || log_out_ext "[FAILED] to remove ${REMOVE_ME}" "2";
        fi
}

# performs some basic checks on file or directory and add the saveing
check_this_item() {
        ITEM_TO_BE_CHECKED=$1
        if [[ -f "${ITEM_TO_BE_CHECKED}" || -d "${ITEM_TO_BE_CHECKED}" ]]
        then
                SAVED=( $(du -s ${ITEM_TO_BE_CHECKED} | cut -f1 ) );
                SAVEING+=( ${SAVED} )
                log_out_ext "[LOGLEVEL2] saveing ${SAVED} on ${ITEM_TO_BE_CHECKED}" "2"
                remove_file_or_directory "${ITEM_TO_BE_CHECKED}"
        fi
}



clean_any_server() {

        # Things we do not need, e.g. Directories, bat files, samples, ... we do not need
        log_out "[INFO] Checking on things we do not need";
        THINGS_WE_DO_NOT_NEED=( bkp/ cps/sharepoint/ ibm-jre/docs/ samples/ maps/ nlp/stanford-corenlp-3.7.0-models-spanish.jar nlp/stanford-corenlp-3.7.0-models-french.jar sdk/MAQuery.xsd sdk/MAResponse.xsd sdk/NET3.5 sdk/c++ sdk/dqe templates/ps/tm1/ uninstall/ webcontent/samples/ webcontent/servlet/default.htm webcontent/skins/business/ webcontent/skins/classic/ webcontent/skins/contemporary/ webcontent/skins/modern/ webcontent/skins/presentation/ webcontent/tm1/ configuration/search/collections/smarts_clue_es configuration/search/collections/smarts_clue_fr wlp/bin/tools/win/prunsrv.exe )
        for REMOVE_ME in ${THINGS_WE_DO_NOT_NEED[@]}; do
                log_out_ext "[INFO] checking on ${REMOVE_ME}" "1"
                # test if file or directory exists
                check_this_item ${REMOVE_ME};
        done

        # all language files in bin and bin64, except en + dee
        LANGUAGES=( cs da eu es fa fi fr hr hi hu it ja kk lv ko nb nl no pl pt ro ru sl sv th tr zh-cn zh-hk zh-mo zh-sg zh-tw )
        # all languages in webcontent documentation, excelpt en + de
        LANGUAGES2=( ar ca fi cs el es fr hr hu ja ko no pt ru sl th zh-cn it kk nl pl ro sk sv tr zh-tw )
        FILEENDINGS=( bmf html jpg js json min png properties txt xml )
        find ./ > /tmp/crn_directory

        # find files haveing the language we do not need
        for LANGUAGE in ${LANGUAGES[@]}; do
                for SUFFIX in ${FILEENDINGS[@]}; do
                        log_out_ext "[INFO] working on *_${LANGUAGE}.${SUFFIX}" "1"
                        for REMOVE_ME in $(grep -i _${LANGUAGE}\.${SUFFIX} /tmp/crn_directory ); do
                                check_this_item "${REMOVE_ME}";
                        done
                done
        done

        # we don't need *.bat files
        for REMOVE_ME in $(find ./ -name "*.bat" ); do check_this_item ${REMOVE_ME}; done

        # find *.dll we do not need
        for REMOVE_ME in $(find ./ -name "*.dll" ); do
                log_out_ext "[INFO] checking on ${REMOVE_ME}" "1"
                check_this_item "${REMOVE_ME}";
        done

        # find ReadMe we do not need
        for REMOVE_ME in $(find ./ | grep -i ReadMe ); do
                log_out_ext "[INFO] checking on ${REMOVE_ME}" "1"
                check_this_item "${REMOVE_ME}";
        done

        # find documentation folder we do not need
        for REMOVE_ME in ${LANGUAGES2[@]}; do
                log_out_ext "[INFO] checking on webcontent/documentation/${REMOVE_ME}" "1"
                check_this_item "webcontent/documentation/${REMOVE_ME}"
        done

        # cleanup database files
        DB_NOT_NEEDED=( informix oracle sqlserver sybase zosdb2 );
        for DB in ${DB_NOT_NEEDED[@]}; do
                for REMOVE_ME in $(find configuration/schemas -type d | grep -i "${DB}"); do
                        log_out_ext "[INFO] checking on ${REMOVE_ME}" "1"
                        check_this_item "${REMOVE_ME}"
                done
        done

        SAVEING_WLP+=( $(du -s wlp/usr/servers/cognosserver/workarea/org.eclipse.osgi/64/data/cache/ | cut -f1 ) )

        SAVEING_TOTAL=0
        IFS="+"; SAVEING_TOTAL=$(bc<<<"${SAVEING[*]}")
        SAVEING_TOTAL_HUMAN=$(echo $((${SAVEING_TOTAL}*1024)) | numfmt --to=iec);
        SAVEING_WLP_HUMAN=$(echo $((${SAVEING_WLP}*1024)) | numfmt --to=iec);
        log_out "[INFO] Total saveing: ${SAVEING_TOTAL} KB = ${SAVEING_TOTAL_HUMAN}"
        log_out "[INFO] Websphere cache: ${SAVEING_WLP} KB = ${SAVEING_WLP_HUMAN}"

}
cognos_product_version() {
        COGNOS_VERSION=$(cat cmplst.txt | grep -i PRODUCT_VERSION | cut -d'=' -f2);
}


#
# Loop over environments of server (default is crn0 only)
#
for i in ${LOOP_CRN_ENVS}; do
        log_out "[INFO] cleaning ${i} - ${HOST} "
        [[ "${DRYMODE}" -eq "TRUE" ]] && log_out "[INFO] running in DRYMODE" || log_out "[INFO] not running DRZMODE, will delete files not needed"
        log_out "[INFO] loglevel: ${LOGLEVEL} "
        log_out "-----------------------------------"
        # set the actual env
        COG_ENV=$i

        # change directory to env
        cd ${TARGETPATH}/${COG_ENV};

        # Cognos Version
        cognos_product_version
        if [[ ${COGNOS_VERSION} == "" ]]; then
                log_out "[INFO] there is no cognos installation in this path "$(pwd)
                continue
        else
                log_out "[INFO] Cognos Version: ${COGNOS_VERSION}";
        fi

        # disk usage before
        USAGE_BEFORE=$(du -s | cut -f1);
        USAGE_BEFORE=$(($USAGE_BEFORE*1024))
        USAGE_BEFORE_HUMAN=$(echo $USAGE_BEFORE | numfmt --to=iec)
        log_out "[INFO] Disk usage before: ${USAGE_BEFORE} bytes = $USAGE_BEFORE_HUMAN ";


        # clean on any server does not matter web or app server
        clean_any_server

        if [[ ${MYTYPE} == "i" && ${LINE::4} == "test" ]]; then
                COG_INSTALL_TYPE=ONETIER
                clean_app_server
                clean_web_server
        fi
        if [[ ${MYTYPE} == "i" && ${LINE::4} != "test" ]]; then
                COG_INSTALL_TYPE=WEBSERVER
                clean_web_server
        fi
        if [[ ${MYTYPE} == "a" ]]; then
                COG_INSTALL_TYPE=APPSERVER
                clean_app_server
        fi

done


echo [done]
echo
